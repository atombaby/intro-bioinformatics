% Introduction to Bioinformatics
% Lesson 1 - Gestalt & remote access


# Introductions

* Name
* What you're working on
* Experience


# What you'll get from this class

* High level overview of how to _approach_ bioinformatics
* Basic bioinformatics technical skills
* Enough momentum to initiate self-learning process


# What you won't get from this class

* Mathematics
* Statistics
* Higher level programming
* Knowledge of every bioinformatics program/method ever created

These are things you'll have to develop piecemeal, as needed.


# Please spend _some_ time outside class

* Time is the only way to learn these things
* The waiting list is > 127 long


# Overview of class

1. Gestalt & remote access
2. Unix shell - overview/intro
3. Unix shell - scripting & advanced tools
4. Version control with git
5. Python - syntax & types
6. Python - data structures
7. Python - writing a program


# Today

* 1/2 overview
* 1/2 remote access


# Why computers?

<br/>

**DATA**


# Biology data

* Cheaper
* Faster
* More


# To understand biology, we need to understand data

<br/>

**ENTER DATA SCIENCE**


# What is data science?

<br/>

**???**


# Soren MacBeth's definition

> _Data science_ is the stuff that people with the job title of _Data Scientist_ do.

In other words, it's hard to define, largely because there is something amorphous about it.


# From the book

(edited)

> A jazz musician can walk into a nightclub, hear a familiar song, recognize the chord changes, and begin playing musical ideas over these chords.
> Likewise, a bioinformatician may receive a huge sequencing data set, and immediately start using a set of tools to learn about the data, and see what story the data tell.
>
> ...
> Learning one’s tools is a necessary, but not sufficient step...


# From the "Bird", Charlie Parker

> You've got to learn your instrument.
> Then, you practice, practice, practice.
> And then, when you finally get up there on the bandstand, forget all that and just wail.

Also phrased as

> Learn the changes, then forget them.


# My summary

## Data science is more than the sum of the pieces

There is an art to putting the pieces together to make science happen.


# Stages of Data Science / Bioinformatics

munging => exploration => conclusions => rinse & repeat


# Data munging

* Cleaning data
* Transforming data


# Data exploration

* Visualize
* Build intuition
* Hypothesize


# Building conclusions

In which we shore things up to tell the world...

* Statistical analysis
* More visualization


# Specific goals for research

* Reproducibility
* Robustness
* Accuracy
* Clarity
* Iterability


# Things we can do towards these goals

immutability | documentation | automation


# Treat data as immutable!

**Never** change data in place; data in, data out.


# Document **everything**!!!

Hopefully you're already doing this with your biology work.

Bioinformatics should be no different.

* Software versions
* Settings used to run things
* Reasoning behind the way you do things
* How you got your data, and when you got it


# The best documentation is automation

By definition leaves no questions about how things were run

* Munging scripts
* Plotting scripts
* Statistic scripts
* Build scripts tying it all together (scripts of scripts (& other programs))


# The Unix Philosophy

As applied to data science:

* Small, composable tools
* Plumb together into pipelines
* Embrace plain text/data

Bioinformatics does this better than most data science.


# Project layout

Clear and consistent organization between projects:

```text
your-project
├── README.md
├── build.sh
├── data
│   ├── sequences.fasta
│   └── metadata.csv
├── scripts
│   ├── clean.py
│   └── plot.R
└── output
    ├── alignment.fasta
    ├── cleaned_metadata.csv
    ├── tree.newick
    └── tree_plot.png
```


# Project layout

The author takes a different approach. Find what works for you...

Bottom line: Being consistent aids in automation:

* naming schemes
* path schemes


# Tools

* **text/terminal:** markdown files + vim/emacs + bash/zsh + tmux
* **notebooks:** IPython/Jupyter, Sage, Gorilla REPL, Mathematica, etc.
* **workbenches:** RStudio, Matlab, Scilab, etc.


# Practicum!

But first, **Questions?**


# Fire up NoMachine

Open no machine, and click the "New" button in the orange bar.
Name your connection, so you'll remember what it is (lynx/manx).

1.  The protocol is "nx"
2.  The host is lynx or lynx.fhcrc.org or manx or manx.fhcrc.org, port 4000
3.  The authentication is password
4.  Don't use a proxy
5.  Name your connection so you can remember what it is.


# Open a terminal

1. Click the square button in the upper left.
2. Type in "Terminal"
3. Click on the Terminal icon (the one with `>_` on it)


# SSH into rhino

1. Enter `ssh rhino` into the terminal
2. Enter your Hutch password when prompted
3. Note the machine to which you're connected (e.g. `rhino02` v `rhino04`)


# Download tmux.conf & fire up tmux

    wget https://github.com/fredhutchio/intro-bioinformatics/raw/master/config/tmux.conf

    mv tmux.conf ~/.tmux.conf

    tmux


# Quick tmux demo

* `Ctrl-A` - your "Command key"
* `Ctrl-A ?` - Help
* `Ctrl-A d` - Detatch session

<br/>

* `Ctrl-A C` - New window
* `Ctrl-A <Space>` - Next window


# Create a project directory

    mkdir ~/bioinfclass

    cd ~/bioinfclass

    mkdir data output scripts

    touch README.md


# Dowload data with `wget`

    wget https://github.com/fredhutchio/intro-bioinformatics/raw/master/data.tar


# A bit about tar...

^imghl "figures/tar.png" 300


# It's not _that_ bad

    tar -vxf data.tar

This unpacks the data into the `data` dir for us.


# Let's look at what we've done

    tree


# First let's explore the sequence file

    less data/sfv.fasta


# Now let's look at the metadata

    less data/sfv.csv


# This time with `column -t`

    column -t -s , data/sfv.csv | less -S


# Make an alignment, and then a tree from the data

    muscle -maxiters 2 -in data/sfv.fasta -out output/alignment.fasta

    FastTree -nt output/alignment.fasta > output/tree.nw

    nw_display output/tree.nw


# Resources

* These slides: <http://fredhutchio.github.io/intro-bioinformatics>
* SCons for analyses: <http://www.metasoarous.com/scons-for-data-science-and-compbio>


